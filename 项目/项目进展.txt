10.27
今天完成的是车位和车辆的管理员数据库操作模块，日志模块函数写完了具体调用还没写完。
首先思考了项目结构，大概的函数分布和项目功能。
决定使用纯文件，不使用链表。出于学习目的决定使用命令行加标准IO的文件处理方式。
接下来从工具函数开始编写代码，编写几次发现标准IO没想象中那么灵活。
后来经过思考和上网查询，确定了全局内以“文件行”为单位的操作逻辑，使用了几个新函数。
写完工具函数后按照开始思考的项目结构写完了业务函数和管理员函数，代码基本相同。
10.28
今天完成的是剩余的入场出场模块，并补齐了日志。


文件：车位信息，车辆信息，日志信息，当前车辆信息

工具函数：
文件添加
文件修改删除
文件查询
日志函数若干
车位号规则
车牌号规则

业务函
车辆入场 未完
车辆离场（计算费用）
车位添加修改删除
车辆添加修改删除（月租车、长期车）
查询信息 （月租车、长期车）

管理员端：
登录
数据库操作

用户端：
套接字连接
入场
离场


服务端：
套接字连接
入场
离场
发送消息
记录日志

项目/
├─ 业务.h      // 核心业务函数声明
├─ 业务函数.c  // 业务逻辑实现（车辆/车位管理核心功能）
├─ 工具.h     // 辅助工具函数声明
├─ 工具函数.c  // 工具功能实现（文件操作、日志、校验等）
├─ 管理员.c    // 管理员后台交互界面及逻辑
├─ 客户端.c    // 用户端网络交互实现
├─ 服务器.c    // 服务端网络通信及并发处理
└─ 数据文件/   // 运行时生成的存储文件
   ├─ 车位信息.txt
   ├─ 月租车辆.txt
   ├─ 长期车辆.txt
   ├─ cars_now.txt
   └─ logs.txt

逻辑修改：
修改车位状态
增加：
月租车添加，修改1，删除修改0
长期车添加，修改1，删除修改0
修改：
入场函数车位修改仅限于临时车
离场函数车位修改仅限于临时车
